// automatically generated by the FlatBuffers compiler, do not modify

package systeminfo

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Chip struct {
	_tab flatbuffers.Table
}

func (rcv *Chip) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Chip) PhysicalID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Chip) VendorID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) CPUFamily() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) Model() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) ModelName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) Stepping() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) Microcode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) CPUMHz() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Chip) CacheSize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chip) CPUCores() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Chip) Flags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Chip) FlagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ChipStart(builder *flatbuffers.Builder) { builder.StartObject(11) }
func ChipAddPhysicalID(builder *flatbuffers.Builder, PhysicalID int32) {
	builder.PrependInt32Slot(0, PhysicalID, 0)
}
func ChipAddVendorID(builder *flatbuffers.Builder, VendorID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(VendorID), 0)
}
func ChipAddCPUFamily(builder *flatbuffers.Builder, CPUFamily flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(CPUFamily), 0)
}
func ChipAddModel(builder *flatbuffers.Builder, Model flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Model), 0)
}
func ChipAddModelName(builder *flatbuffers.Builder, ModelName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ModelName), 0)
}
func ChipAddStepping(builder *flatbuffers.Builder, Stepping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(Stepping), 0)
}
func ChipAddMicrocode(builder *flatbuffers.Builder, Microcode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(Microcode), 0)
}
func ChipAddCPUMHz(builder *flatbuffers.Builder, CPUMHz float32) {
	builder.PrependFloat32Slot(7, CPUMHz, 0.0)
}
func ChipAddCacheSize(builder *flatbuffers.Builder, CacheSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(CacheSize), 0)
}
func ChipAddCPUCores(builder *flatbuffers.Builder, CPUCores int32) {
	builder.PrependInt32Slot(9, CPUCores, 0)
}
func ChipAddFlags(builder *flatbuffers.Builder, Flags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(Flags), 0)
}
func ChipStartFlagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ChipEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
